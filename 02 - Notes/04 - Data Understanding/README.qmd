---
title: "Data Understanding: 2nd Stage of C-DM Model"
author: "Daniel Carpenter"
format: 
  gfm:
    toc: true
    number-sections: true
    toc-depth: 2
standalone: true
    
editor: visual
---

# Resources
* [R for Data Science](https://r4ds.had.co.nz/)
* [R Visualization](https://r-graph-gallery.com/index.html)
  * [Visualization best practices](https://www.data-to-viz.com/caveats.html)
  * [Animate ggplot](https://r-graph-gallery.com/animation.html)
  * [Deciding on a visualization](https://www.data-to-viz.com/img/poster/poster_big.png)

<br> 
<br>

> Using visualization to understand the data  
> Reduce dimension of data for analysis   

# Data Quality

Main elements to check for in dataset:  

* Accuracy *(errors)*
* Completeness: *(selection bias)*
* Timeliness *(Recency)*

<br>


# Visualization in R

Two Motivations of visuals:

## Exploring 

Looking at data for

* Outliers, highly skewed distributions
* Correlations among variables
* Truncated values; inexplicable values
* Potential relationships and patterns

### Exploration based on number of datas

Type                  | Visualization Options
----------------------|--------------------------------------------------------
Univariate analyses   | descriptive statistics, frequency tables, histograms and densities, box plots
Bivariate analyses    | correlations and heatmaps, scatterplots, trends, cross tabulations
Multivariate analyses | parallel plots, mosaic plots, regression, PCA, MDS, variable clustering


## Mixed Models

### What are Mixed Models?
* Trade off between regression on multiple groups, and more meaningful aggregation
* Looks at trends in groups and overall trend of data

### Visualizing Mixed Model: Plus fitted vs. Residuals
```{r, cache=TRUE}
if (!require(lme4)) install.packages('lme4') # lmer function for mixed model
data(sleepstudy,package="lme4")

# Mixed linear model
mixed <- lmer(Reaction ~ Days + (1+Days|Subject), data=sleepstudy)
summary(mixed)
sleepstudy$res_mix <- residuals(mixed) #residuals mixed model

# Basic linear model
linModel <- lm(data=sleepstudy, Reaction~Days)
summary(linModel)

# Capture fitted vs. residual data of linear model
sleepstudy$res <- residuals(linModel)
sleepstudy$fit <- predict(linModel)


# Compare results of mixed lm and basic lm
ggplot(sleepstudy, aes(x=Subject, y=res_mix)) +
  geom_point(aes(color = 'Mixed Residuals'),
             alpha = 0.5) +
  
  # Residuals of the new mixed model
  stat_summary(aes(color = 'Mixed Model'), size=1) +
  
  # Residuals of the old lm model
  stat_summary(aes(y=res, color='Basic lm'), size=1) +
  
  scale_color_manual(name='Legend',
                     breaks=c('Mixed Residuals', 'Mixed Model', 'Basic lm'),
                     
                     # Map the colors
                     values=c('Mixed Residuals' = 'tomato', 
                              'Mixed Model'     = 'tomato3', 
                              'Basic lm'        = 'steelblue3')) +
  
  labs(title = 'Mixed Model vs. Basic Lm Results',
       y     = 'Reaction',
       x     = 'Number of Days')
  

# Overall mean intercept and slope
mean_int <- fixef(mixed)[1] #mean intercept for the mixed model
mean_slope <- fixef(mixed)[2] #mean slope for the mixed model

sleepstudy$fit_mix <- predict(mixed) #fitted values from the mixed model

# Fitted vs actuals
ggplot(sleepstudy, aes(x=Days, y=Reaction)) +
  geom_point() +
  facet_wrap(~Subject, nrow=3) +
  
  # Line for fitted values of the mixed model
  geom_line(aes(y=fit_mix), size=.75) +
  
  # Fixed line of the overall slop and intercept
  geom_abline(intercept=mean_int, slope=mean_slope, color="red", size=.75)

```

## `ggplot` Examples

### Load data
### 
```{r, cache=TRUE}
data(iris)     # make sure data is loaded   (the iris data is part of the standard R distribution)
head(iris)     # look at the first few records

# ?iris          # access 'help' on the iris data  

#perform a frequency count for the Species
table(iris$Species)
```

### box plots 
```{r, cache=TRUE}

boxplot(data=iris, Sepal.Length ~ Species,           # boxplot of Sepal.Length by Species 
        main = "Iris Sepal Length by Species ",      # main plot title
        xlab = "Species",                            # x-axis label   
        ylab = "Sepal Length (cm)")                  # y-axis label   


# if you want to save the plot as an image, you can 
# either use the "export" functionality in the Plots tab window in RStudio, 
# or you can use do this programmatically...  e.g. to save as a pdf use: pdf("filename.pdf")
# and then run the plot.  This redirects all graphics output to the pdf file.
# You can set the size (in inches) for the pdf output.
# To redirect back to the screen, turn off the "pdf device" using: dev.off()
# See example:


pdf("irisBoxplot.pdf",width=8, height=6)    #this will re-direct your graphic output to a pdf file

boxplot(data=iris, Sepal.Length ~ Species,           # boxplot of Sepal.Length by Species 
        main = "Iris Sepal Length by Species ",      # main plot title
        xlab = "Species",                            # x-axis label   
        ylab = "Sepal Length (cm)")                  # y-axis label   

dev.off()

```

### histograms and densities 
```{r, cache=TRUE}
#some very simple to code, quick and dirty histograms
# perfect for quickly exploring the data

par(mfrow=c(2,2))  #OPTIONAL: change the graphical parameters so the histograms are produced 4 to a page
#see ?par for more details on setting graphical parameters

hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)


#NOTE:  we could have made these look better, e.g. with better titles and labels


hist(iris$Sepal.Length, main = "Sepal Length", xlab = "Sepal Length")
hist(iris$Sepal.Width,  main = "Sepal Width", xlab = "Sepal Width")
hist(iris$Petal.Length, main = "Petal Length", xlab = "Petal Length")
hist(iris$Petal.Width,  main = "Petal Width", xlab = "Petal Width")


# but, usually when I am exploring the data, I will use the simple verison


par(mfrow=c(1,1))  #RESET graphical parameters to 1 plot per page


#for a final report or publication, I would use better graphics: ggplot2
#here is a basic example...

```

### `ggplot`
```{r, cache=TRUE}
# ggplot2 is the "grammar of graphics" plot library and produces excellent graphics
library(ggplot2)

#qplot is one of the main functions in ggplot2 -- it is short for "quick plot"
#qplot allows you to do histograms, scatterplots, boxplots, line plots, etc.

qplot(data=iris, Petal.Length)


#or you can set several options to modify the output

qplot(data=iris, Petal.Length,                       #identify data & variable
      geom="histogram",                   #set the "geometry"
      binwidth=0.2,                       #option for histogram
      main= "Histogram for Petal Length", #title
      xlab = "Petal Length",              #x-axis label
      fill=I("blue"),                     #fill color
      alpha=I(0.45))                      #set fill transparency

#ggplot is the primary function in ggplot2
#it allows for much more control over the graphics than qplot does

```

### Density
```{r, cache=TRUE}
#for the next chart, I want to produce a density

library(reshape2)  #this package allows us to reform the data from a "wide" format to a "long" format
iris2<- melt(iris)

#identify data and set the aesthetics         
ggplot(iris2[iris2$variable=="Petal.Length",], aes(x=value, fill=Species)) +
  geom_density(alpha=0.45) +        #set geometry and transparency    
  labs(x = "Petal Length",          #set x-label and title
       title = "Densities for Petal Length of Iris Species")


#we can also use gplot to produce more advanced boxplots
ggplot(iris2,aes(x=variable, y=value, fill=Species)) + geom_boxplot()

```

### Scatter
```{r, cache=TRUE}

#scatter plots --------------------------------------

# create scatter plots for the numerical data in the iris data set
plot(iris)


# qplot and ggplot allow you to add many options and control many settings
# in graphs -- this can look quite confusing at first
# however, most of the parameter settings are optional and have defaults if not set
# the following bit of code might seem a bit overwhelming at first,
# but most of the complexity is related to setting up colors, sizes, styles, and labels


# using qplot a.k.a "quickplot" to produce scatter plot
qplot(data=iris, x=Sepal.Length,y=Sepal.Width,size=I(5)) +   # point size=5 
  theme_bw() +                                               # using black and white background theme
  labs(y = "Sepal Width (cm)",                               # x-axis labels    
       x = "Sepal Length (cm)")                              # y-axis labels


# using ggplot a.k.a "grammar of graphics plot" to produce scatter plot
ggplot(data=iris, aes(x=Sepal.Length,y=Sepal.Width)) +        # set data and aesthetics
  geom_point(aes(fill=Species),                               # add points (fill color based on "Species")
             colour="black",                                  # -- outline set to black
             pch=21,                                          # -- shape = 21, a filled circle
             size=5) +                                        # -- size = 5
  theme_bw() +                                                # using black and white background theme
  labs(y = "Sepal Width (cm)",                                # x-axis labels 
       x = "Sepal Length (cm)") +                             # x-axis labels    
  theme(legend.position = "none")                             # turn legend off



ggplot(data=iris, aes(x=Sepal.Length,y=Sepal.Width)) +  
  geom_point(aes(fill=Species), colour="black",pch=21, size=5) +
  theme_bw() +
  labs(y = "Sepal Width (cm)",
       x = "Sepal Length (cm)") +
  theme(legend.key=element_blank())                         # legend is on, but the outline is off


ggplot(data=iris, aes(x=Petal.Length,y=Petal.Width)) +  
  geom_point(aes(fill=Species),   
             alpha=I(.85),                               # alpha (i.e. opacity) is set to 0.85
             colour="black",pch=21, size=5) +
  theme_bw() +
  labs(y = "Petal Width (cm)",
       x = "Petal Length (cm)") +
  theme(legend.key=element_blank(),
        axis.title = element_text(size = 14))            # set axis title font size to 14


ggplot(data=iris, aes(x=Petal.Length,y=Petal.Width)) + 
  geom_point(aes(fill=Species), 
             alpha=I(.75),                               # alpha (i.e. opacity) is set to 0.75
             position = "jitter",                        # "jitter" the position of the points
             colour="black",pch=21, size=5) +
  theme_bw() +
  labs(y = "Petal Width (cm)",
       x = "Petal Length (cm)") +
  theme(legend.key=element_blank(),
        axis.title = element_text(size = 14))


# a "pairs" plot that incorporates densities, scatterplots, and correlations
```

### Interactive
```{r, cache=TRUE}

library(GGally)   #adds some more functionality to ggplot2 -- including pairs and parallel plots


ggpairs(iris[, 1:5], lower=list(continuous="smooth", wrap=c(colour="blue")),
        diag=list(wrap=c(colour="blue")), 
        upper=list(wrap=list(corSize=6)), axisLabels='show')
```

### parallel plots
```{r, cache=TRUE}

library(lattice)                                            #load the "lattice" library for parallel plots
parallelplot(~iris[1:5], data=iris,                         # create parallel plot of iris data;
             groups = Species,                            # use "Species" to define groups (and colors)
             horizontal.axis = FALSE)                                    # defaults to horizontal axis, set to vertical                           


#parallelplot help documentation -- the input is unfortunately a little different with the ~ symbol
# ?parallelplot


parallelplot(~iris[1:4] | Species, data = iris,             #same as above, except condition the plot by Species
             groups = Species,   
             horizontal.axis = FALSE, 
             scales = list(x = list(rot = 90)))            #and rotate the labels on the x-axis


# you can kind of go crazy with some of this stuff too...
# parallel plots + boxplots = maybe too messy to be useful?  let's see

# underlay univariate boxplots, add title, using a function from GGally
ggparcoord(data = iris,columns = c(1:4),groupColumn = 5,
           boxplot = TRUE,title = "Parallel Coord. Plot of Diamonds Data")
```

### Radar
```{r, cache=TRUE}
#my embarassingly bad radar plot in R...
# install.packages("fmsb")
library(fmsb)
radarchart(iris[,1:4], maxmin=FALSE, centerzero=TRUE)


#my pitiful looking stars plot....
stars(iris[,1:4], radius=TRUE, key.loc = c(30,15), ncol=10, nrow= 15, col.stars = iris$Species)
```

<br>


# Correlation
* Starting point for the analysis
* Good for dimension reduction

<br>

## Corr: Pearson, Spearman and Kendall

Name     | Use                  | Test
---------|----------------------|--------
Pearson  | Only *Linear* relationships | R is square root of R-Squared. <br> Note **VERY sensitive** to extreme values <br> <img src = 'Images/p_corr.png' height = 100>
Spearman | Both linear/non-linear | Rank correlation for shotgun data. <br> More sensitive to few large values and descrepemses
Kendall  | | Rank again, but degree of concordance

<br>

## In `R`
<img src = 'Images/corr_mat.png' height = 200>

### Heatmap
```{r}
knitr::kable(cor(mtcars) ) # raw
heatmap(cor(mtcars))       # visual
```

<br>

## `Concordant` and `discordant` pairs


<br>

# Outliers 


## Outlier Detection
Outlier detection may depend on distributional assumptions, e.g. normally
distributed data.  

### Tools to check for normality:
* Visualizations, e.g. histograms, QQ plots
  - <img src = "Images/qq.png" height = 300>
* Statistical tests, e.g. Kolmogorov-Smirnov, Shapiro-Wilk, Anderson-Darling test,
chi-square goodness of fit test

<br>

### If the data is not normally distributed, then:
* Use caution in the formal/informal tests
  - standard deviation method; z-score
  - MADe method
  - modified z-score
  - boxplot; adjusted boxplot
* COnsider transforming data

<br>

### Standard deviation method; z-score
<img src = "Images/out_1.png" height = 300> <br>
<img src = "Images/out_2.png" height = 300> <br>
<img src = "Images/out_3.png" height = 300> <br>

<br>

### MADe method
> Less sensative to extreme values

<img src = "Images/mad_1.png" height = 300> <br>
<img src = "Images/mad_2.png" height = 300> <br>

<br>

### Boxplots
* Use basic boxplots to see outliers
* Adjusted bp method identifies fewer outliers usually

<br>

## Outlier Identification

### Assumptions
* normality is assumed in most tests
* single outlier vs multiple outlier tests
* issues of masking and swamping
* Grubb’s test: generalized extreme studentized deviates (ESD)

### Grubbs Test `grubbs.test`
* uses `outliers` package

### Generalized ESD Test  `removeoutliers()`



<br>

# Missing Values
> How to handle pissing values in stats analysis
<br>

## Types of Missing Value Mechanisms

Type | Description     | Assumption
-----|-----------------|-------------
MCAR | Completely random | Assume same distribution as non missing
MAR  | Missing depends on data | May not follow same distribution as non missing
MNAR | Depends on the data missing. Most likley

## Missingness in R
```{r, cache=TRUE}

# Question: 
# How can I look at the proportion missing for each factor or group level?

# To illustrate, let me create some 'missingness' in the Iris data:

data(iris)

iris[1:15,1] <- NA        #setting column 1 to NA for observations 1 thru 15 
iris[1:35,2] <- NA        #setting column 2 to NA for observations 1 thru 35 
iris[70:85,3] <- NA       #setting column 3 to NA for observations 70 thru 85
iris[110:120,4] <- NA     #setting column 4 to NA for observations 110 thru 120


# One solution is a creative use of the "aggregate" function
# USAGE: 
# df<-aggregate(DATAFRAME, by=list(GROUPING LIST), function(x) USER-DEFINED FUNCTION)

# where DATAFRAME is the data set iris; 
# GROUPING LIST is the set of values we use as factor levels
# and the USER-DEFINED FUNCTION is a function we create to take 
# the average of the is.na() logical vector.

# quick digression:  -- we can perform sums and means on logic vectors, e.g.
mean(is.na(iris$Sepal.Length))  # --  overall missing proportion for Sepal.Length

# so we can do now do the following:
aggregate(iris, by=list(iris$Species), function(x) mean(is.na(x)))



# Question: 
# ------------------
# How can I look patterns of missingness among variables?

# let's look at some packages that deal with Missing Values explicitly
# two packages: mice and VIM

# install.packages("mice")   #install and load the MICE
library(mice)              #load the MICE package:  Multivariate Imputation by Chained Equations 


data(mtcars)             #some data to play with

#let's just grab a few of the variables
mtcars<-mtcars[,c("mpg","hp","qsec")]

# set a few variable cases to missing 
mtcars[1:9,"mpg"]<-NA    
mtcars[7:11,"hp"]<-NA
mtcars[c(2,3,10,19,31),"qsec"]<-NA

# can use the mice function "md.pattern" 
# and "md.pairs" to get a quick overview of missingness
 
#check out ?md.pairs and ?md.pattern for details
# ?md.pairs
# ?md.pattern

md.pairs(mtcars)
md.pattern(mtcars)       



# Question: 
# ------------------
# What about visualizing missingness?

library(VIM)  #package for "Visualization and Imputation of Missing Values"

# can use VIM's "aggr" function to also get overall information on missing
a<-aggr(mtcars)
summary(a)

# use VIM function "marginplot" to get a scatter plot that includes information on missing values
marginplot(mtcars[c("mpg","qsec")], col = c("blue", "red", "orange"))

# can also look at all of the plots with Missing Information
scattmatrixMiss(mtcars)



#----------------------------------------------------------------------------------


#create some more fake data and examine different kinds of MVM

x<-rexp(1000)
y<-rnorm(1000) 
z<-runif(1000)


df<-data.frame(x,y)
scattmatrixMiss(df)   #no missing data

df[z>0.9,"y"]<-NA  #MCAR
sum(is.na(df[,"y"]))
scattmatrixMiss(df) 


df<-data.frame(x,y)
df[df$x>2.1,"y"]<-NA  #MAR
sum(is.na(df[,"y"]))
scattmatrixMiss(df)


df<-data.frame(x,y)
df[df$y>1.10,"y"]<-NA  #MNAR
sum(is.na(df[,"y"]))
scattmatrixMiss(df)
```

<!-- <br> -->

<!-- # `Principal Component Analysis` & `dimension reduction` -->

<!-- <br> -->


<!-- # Principal Component Analysis in `R` -->

<!-- <br> -->

