---
title: "Homework 1"
author: "Daniel Carpenter"
date: "August 2022"
format: 
  pdf:
    toc: true
    toc-depth: 1
    number-sections: true
    # mainfont: Arial
    highlight-style: github #arrow
    # code-block-bg: true
    code-block-border-left: "#D6D6D6"
execution:
  echo:    true
  include: true
  cache:   true
editor: visual
---

\newpage

# Using R: Vectors

## (a)

Create a vector with 10 numbers (3, 12, 6, -5, 0, 8, 15, 1, -10, 7) and assign it to x.

```{r}
x <- c(3, 12, 6, -5, 0, 8, 15, 1, -10, 7)
```

## (b)

Using the commands seq, min, and max with one line of code create a new vector y with 10 elements ranging from the minimum value of x to the maximum value of x.

```{r}
# Min, max of x vector
xMin = min(x)
xMax = max(x)
INCREMENT = (xMax - xMin) / (length(x) - 1) # size of each step

# Create the vector from min of x to max of x while maintaining length of 10
y = seq(min(x), max(x), INCREMENT)
y # display

# Prove is 10 elements:
paste('The length of y is:', length(y) )
```

## (c)

### Compute the `sum`, `mean`, `standard deviation`, `variance`, `mean absolute deviation`, `quartiles`

```{r}
# Combine x and y into single object
xAndY <- cbind(x, y)

# This is what x and y look like
head(xAndY)

# List of all the function to calculate on x and y (excluding quintile)
vectorOfFuns      <- c('sum', 'mean', 'sd', 'var', 'mad', 'quantile')
vectorOfFunsNames <- c('sum', 'mean', 'standard deviation', 'variance', # function full names 
                       'mean absolute deviation', 'quartiles')

for (funIdx in 1:length(vectorOfFuns)) {
  
  # Print result of the function calculation output, for x and y
  print( paste( vectorOfFunsNames[funIdx], 'of x and y:' ) )
  
  # Calulate using a function from `vectorOfFuns`
  output <- apply(xAndY,                         # Using X and Y
                  ncol(xAndY),                   # There are n cols in x & y
                  paste0(vectorOfFuns[funIdx]) ) # Retrieve/apply function
  
  print(output)
}
```

### Compute the Quintiles

```{r}
# Quintile for x
quantile(x, probs = seq(0, 1, 0.20))

# Quintile for y
quantile(y, probs = seq(0, 1, 0.20))
```

## (d)

Use sample() to create a new 7 element vector z by using R to randomly sample from x with replacement.

```{r}
z = sample(x, size=7)

z # show value
```

## (e)

Use `t.test()` to compute a statistical test for differences in means between the vectors `x` and `y`.

```{r}
t.test(x, y)
```

*Are the differences in means significant?*

No, they are not statistically significant (90%, 95%, or 99%), given

-   t-value is \< \~1.96\
-   p-value is \> 0.10, 0.05. 0.01

## (f)

To sort a data frame in `R`, use the `order()` function. Sort the vector `x` and re-run the t-test as a paired t-test.

```{r}
# Sort x
xSorted = x[order(x)]

# Run as paired t test
t.test(x, y, paired = TRUE)
```

## (g)

Create a logical vector that identifies which numbers in x are negative.

```{r}
xThatAreNeg = x < 0

x # reminder of what x looks like
xThatAreNeg # display
```

## (h)

Use this logical vector to remove all entries with negative numbers from x. (Make sure to overwrite the vector x so that the new vector x has 8 elements!)

```{r}
x = subset(x, !xThatAreNeg)

x # display
```

\newpage

# Using R: Some missing values

## (a)

### Use the code below to create the dataframe X and

```{r}
col1 <- c(1,2,3,NA,5)
col2 <- c(4,5,6,89,101)
col3 <- c(45,NA,66,121,201)
col4 <- c(14,NA,13,NA,27)
X <- rbind (col1,col2,col3,col4)
```

### Then write code to display all rows in X with missing values.

```{r}
# All rows of X that have NAs (e.g., not complete)
X[!complete.cases(X), ]
```

## (b)

Use the following vector y for this part:

```{r}
y <- c(3,12,99,99,7,99,21)
```

### i.

Some statistical applications and older systems sometimes code missing values with a number, e.g., 99. In order to let R know that is a missing value you need to recode it as 'NA'. Please write a line of code that will replace any 99's in the vector y with 'NA'.

```{r}
# Replace 99 with NA values in the vector y
y[y == 99] <- NA
y
```

### ii.

With the updated vector y, write code that will count the number of missing values in it.

```{r}
# Number of NA values in the vector y
sum( is.na(y) )
```

\newpage

# Using R: Introductory data exploration

## a. Read in `college.csv`

```{r}
college <- read.csv('college.csv')
```

## b. Preview data

```{r}
# Create row names for each college
rownames(college) <- college[, 1] 

# Remove the college variabl
college <- college[,-1] # get row names and store as field

# View(college)
```

## c.

### i. Stats on Data

```{r}
# summary of each variable
summary(college)
```

### ii. Pairs Plots

```{r, fig.height=11, fig.width=8}
# Find package for `pairs`
# ?pairs


# Correlation between 1st 10 variables
pairs(college[, 2:11]) # 2-11 since first variable is type character
```

### iii. Boxplots: Private/Public OS Tuition

```{r, fig.height=4}
# Note used boxplot instead of plot since it is the de facto for base R
# Hope that choice is okay - took a judgement call
boxplot(
        # Data
        Outstate ~ Private, # Y ~ X
        data   =  college,  # Dataset
        
        # Aesthetics (titles & colors)
        main   = "Out of State Tution: Public vs. Private Colleges",
        names  = c('Public', 'Private'), # names of the x axis
        xlab   = "College Type",
        ylab   = "Out of State Tuition ($)",
        col    = "lightblue2",
        border = "steelblue4"
)
```

### iv. `Elite` variable

```{r}
# By default create and set the Elite variable to 'No'
Elite <- rep ("No", nrow(college ))

# If the college has more than 50 students from the top 10% of their class,
# Then 'Yes', the college is elite
Elite [college$Top10perc >50] <- "Yes"

# Ensure the data type is a factor
Elite <- as.factor(Elite)

# Finally add the new `Elite` variable to the college data frame
college <- data.frame(college ,Elite)
```

### v. \# of Elite Colleges

-   Note there are 78 elite schools (699 that are not elite). See below.

```{r}
summary(college$Elite)
```

### vi. Boxplots: Elite OS Tuition

```{r}
boxplot(
        # Data
        Outstate ~ Elite, # Y ~ X
        data   =  college,  # Dataset
        
        # Aesthetics (titles & colors)
        main   = "Out of State Tution: Elite vs. Non-Elite Colleges",
        sub    = "Note 'Elite' Definition: College contains > 50 students from top 10% of class",
        names  = c('Non-Elite', 'Elite'), # names of the x axis
        xlab   = "Elite Status of College",
        ylab   = "Out of State Tuition ($)",
        col    = "lightblue2",
        border = "steelblue4"
)
```

### vii. Histograms

-   Plot 4 numeric variables

```{r, fig.height=8, fig.width=8}
par(mfrow=c(2,2)) # Set up 2x2 grid for plotting

# plot histogram with some defaults
hist(x = college$Books,

     # Aesthetics (titles & colors)
     breaks = 20, # Number of bins
     main   = 'Cost Distribution for Books',
     xlab   = 'Cost of Books ($)',
     ylab   = 'Number of Colleges',
     col    = "lightsteelblue1",
     border = "steelblue4"
)

# plot histogram with some defaults
hist(x = college$Room.Board,

     # Aesthetics (titles & colors)
     breaks = 10, # Number of bins
     main   = 'Cost Distribution for Room & Board',
     xlab   = 'Cost of Room & Board ($)',
     ylab   = 'Number of Colleges',
     col    = "palevioletred",
     border = "maroon4"
)

# plot histogram with some defaults
hist(x = college$P.Undergrad,

     # Aesthetics (titles & colors)
     breaks = 50, # Number of bins
     main   = 'Distribution of Number of PT Undergraduates',
     xlab   = 'Number of Part-Time Undergraduates',
     ylab   = 'Number of Students',
     col    = "darkseagreen3",
     border = "darkseagreen4"
)

# plot histogram with some defaults
hist(x = college$F.Undergrad,

     # Aesthetics (titles & colors)
     breaks = 30, # Number of bins
     main   = 'Distribution of Number of FT Undergraduates',
     xlab   = 'Number of Full-Time Undergraduates',
     ylab   = 'Number of Students',
     col    = "thistle",
     border = "plum4"
)
```

\newpage

# Using R: Manipulating data in data frames
