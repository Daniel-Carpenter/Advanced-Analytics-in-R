---
title: "Homework 1"
author: "Daniel Carpenter"
date: "August 2022"
format: 
  pdf:
    toc: true
    toc-depth: 1
    number-sections: true
    # mainfont: Arial
    highlight-style: github #arrow
    # code-block-bg: true
    code-block-border-left: "#D6D6D6"
execution:
  echo: true
  include: true
editor: visual
---

\newpage

# Using R: Vectors

## (a)

Create a vector with 10 numbers (3, 12, 6, -5, 0, 8, 15, 1, -10, 7) and assign it to x.
```{r}
x <- c(3, 12, 6, -5, 0, 8, 15, 1, -10, 7)
```

## (b)

Using the commands seq, min, and max with one line of code create a new vector y with 10 elements ranging from the minimum value of x to the maximum value of x.
```{r}
# Min, max of x vector
xMin = min(x)
xMax = max(x)
INCREMENT = (xMax - xMin) / (length(x) - 1) # size of each step

# Create the vector from min of x to max of x while maintaining length of 10
y = seq(min(x), max(x), INCREMENT)
y # display

# Prove is 10 elements:
paste('The length of y is:', length(y) )
```


## (c)

### Compute the `sum`, `mean`, `standard deviation`, `variance`, `mean absolute deviation`, `quartiles`
```{r}
# Combine x and y into single object
xAndY <- cbind(x, y)

# This is what x and y look like
head(xAndY)

# List of all the function to calculate on x and y (excluding quintile)
vectorOfFuns      <- c('sum', 'mean', 'sd', 'var', 'mad', 'quantile')
vectorOfFunsNames <- c('sum', 'mean', 'standard deviation', 'variance', # function full names 
                       'mean absolute deviation', 'quartiles')

for (funIdx in 1:length(vectorOfFuns)) {
  
  # Print result of the function calculation output, for x and y
  print( paste( vectorOfFunsNames[funIdx], 'of x and y:' ) )
  
  # Calulate using a function from `vectorOfFuns`
  output <- apply(xAndY,                         # Using X and Y
                  ncol(xAndY),                   # There are n cols in x & y
                  paste0(vectorOfFuns[funIdx]) ) # Retrieve/apply function
  
  print(output)
}
```


### Compute the Quintiles
```{r}
# Quintile for x
quantile(x, probs = seq(0, 1, 0.20))

# Quintile for y
quantile(y, probs = seq(0, 1, 0.20))
```


## (d)

Use sample() to create a new 7 element vector z by using R to randomly sample from x with replacement.
```{r}
z = sample(x, size=7)

z # show value
```


## (e)

Use `t.test()` to compute a statistical test for differences in means between the vectors `x` and `y`. 
```{r}
t.test(x, y)
```

*Are the differences in means significant?*

No, they are not statistically significant (90%, 95%, or 99%), given

* t-value is < ~1.96  
* p-value is > 0.10, 0.05. 0.01  

## (f)
To sort a data frame in `R`, use the `order()` function. Sort the vector `x` and re-run the t-test as a paired t-test.
```{r}
# Sort x
xSorted = x[order(x)]

# Run as paired t test
t.test(x, y, paired = TRUE)
```

## (g)
Create a logical vector that identifies which numbers in x are negative.
```{r}
xThatAreNeg = x < 0

x # reminder of what x looks like
xThatAreNeg # display
```

## (h)
Use this logical vector to remove all entries with negative numbers from x. (Make sure to overwrite the vector x so that the new vector x has 8 elements!)
```{r}
x = subset(x, !xThatAreNeg)

x # display
```



\newpage

# Using R: Some missing values

## (a) 

### Use the code below to create the dataframe X and
```{r}
col1 <- c(1,2,3,NA,5)
col2 <- c(4,5,6,89,101)
col3 <- c(45,NA,66,121,201)
col4 <- c(14,NA,13,NA,27)
X <- rbind (col1,col2,col3,col4)
```

### Then write code to display all rows in X with missing values.
```{r}
# All rows of X that have NAs (e.g., not complete)
X[!complete.cases(X), ]
```


## (b) 

Use the following vector y for this part: 
```{r}
y <- c(3,12,99,99,7,99,21)
```

### i. 
Some statistical applications and older systems sometimes code missing values with a number,
e.g., 99. In order to let R know that is a missing value you need to recode it as ‘NA’. Please
write a line of code that will replace any 99’s in the vector y with ‘NA’.
```{r}
# Replace 99 with NA values in the vector y
y[y == 99] <- NA
y
```

### ii. 
With the updated vector y, write code that will count the number of missing values in it.
```{r}
# Number of NA values in the vector y
sum( is.na(y) )
```

\newpage

# Using R: Introductory data exploration